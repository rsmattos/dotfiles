#!/usr/bin/env python3

import pandas as pd
import numpy as np
import regex as re
import h5py
import matplotlib.pyplot as plt
import sys
import os

def help_function(script_name):
    description = """
    ###################################################################################
    # script to read the information at the spawning times from the trajectories file #
    # generated by qdct. Gets the trajectory name, state, energies and energy         #
    # difference at the spawning times.                                               #
    #                                                                                 #
    # input: trajs.hdf5 for a single trajectory                                       #
    #                                                                                 #
    # output: properties.hdf5 with the spawning info                                  #
    #                                                                                 #
    # calling: {} [trajs.hdf5] [properties.hdf5]
    ###################################################################################
    """.format(script_name)
    print(description)
    os._exit(0)

def filter_multi(df, index_level_name, regex, axis=1):
    def f(x):
        return matcher.search(str(x)) is not None
    
    print(regex)
    matcher = re.compile(regex)
    values = df.axes[axis].get_level_values(index_level_name).map(f)
    return df.loc(axis=axis)[values]

def spawn_info_for_traj(tmp_traj_df, traj):
    first_time = tmp_traj_df['positions_traj_'+traj, 'x_0'].first_valid_index()

    prev_nac = 0
    for time, nac in tmp_traj_df.loc[first_time:]['nac_10_traj_'+traj].iterrows():
        new_nac = np.dot(nac, nac)
        if new_nac > prev_nac:
            prev_nac = new_nac
        else:
            return tmp_traj_df.loc[time]

def iterate_trough_trajs(in_file='trajs.hdf5', out_file='properties.hdf5'):
    if os.path.exists(out_file):
        keys = list(h5py.File('properties.hdf5', 'r').keys())
        if 'spawn_info' in keys:
            print('spawn info already extracted.')
            return pd.read_hdf('properties.hdf5', mode='r', key='spawn_info')

    spawn_info_df = pd.DataFrame()
    ha_to_ev = 27.2114
    processed_trajs = ['00']
    
    keys = list(h5py.File(in_file, 'r').keys())
    
    for k in keys:
        S_tmp = pd.read_hdf(in_file, key=k, mode='r')
        S_tmp.keys()
    
        # from the trajs df, get traj name, state, nac, nac_modulus, E0, E1, Ediff
        total_size = len(S_tmp.columns)
        traj_size = 123
        traj_list = []
        # from the column names get each individual traj in the df
        for i in range(0, total_size, traj_size):
            traj, _ = S_tmp.columns[i]
            traj_list.append(traj[15:])
    
        S_tmp.dropna(subset=[('positions_traj_'+traj_list[0], 'x_0')], inplace=True)
        
        # pass a df for one traj at a time
        for t in traj_list:
            if t not in processed_trajs:
                processed_trajs.append(t)
                
                tmp_df = spawn_info_for_traj(filter_multi(S_tmp, index_level_name=0, regex=t+'$', axis=1), t)

                if tmp_df is None:
                    continue
                d = {}
                
                d['traj'] = t
                d['state'] = int(tmp_df.loc['state_traj_'+t])
    
                nac = tmp_df.loc['nac_10_traj_'+t].values
                d['nac_norm'] = np.sqrt(np.dot(nac, nac))
                
                d['energy_S0'] = tmp_df.loc[('energies_traj_'+t, '0')]*ha_to_ev
                d['energy_S1'] = tmp_df.loc[('energies_traj_'+t, '1')]*ha_to_ev
                
                tmp_info_df = pd.DataFrame(data=d, index=[tmp_df.name])
                spawn_info_df = pd.concat([spawn_info_df, tmp_info_df])
    
    spawn_info_df['delta_E'] = spawn_info_df['energy_S1'] - spawn_info_df['energy_S0']
    
    spawn_info_df.to_hdf('properties.hdf5', key='spawn_info', mode='a', complevel=9, complib='blosc:lz4')
    
    return spawn_info_df

def plot_spawn_info(spawn_info_df):
    plt.hist(spawn_info_df['delta_E'], bins=10, alpha=0.6, edgecolor='b')
    plt.title('Energy difference at spawn in eV')
    plt.savefig('E_diff_at_spawn.png')
    plt.close()
   
    plt.hist(spawn_info_df[spawn_info_df['state'] == 0]['delta_E'], bins=10, alpha=0.6, edgecolor='b')
    plt.title('Energy difference at spawn in eV')
    plt.savefig('E_diff_at_spawn_1to0.png')
    plt.close()
    
    plt.hist(spawn_info_df[spawn_info_df['state'] == 1]['delta_E'], bins=10, alpha=0.6, edgecolor='b')
    plt.title('Energy difference at spawn in eV')
    plt.savefig('E_diff_at_spawn_0to1.png')
    plt.close()

    plt.hist(spawn_info_df['nac_norm'], bins=10, alpha=0.6, edgecolor='b')
    plt.title('NAC norm at spawn')
    plt.savefig('nac_norm_at_spawn.png')
    plt.close()
    return

if __name__ == '__main__':

    if len(sys.argv) == 1:
        spawn_df = iterate_trough_trajs()
        plot_spawn_info(spawn_df)

    elif len(sys.argv) == 2:
        if str(sys.argv[1]) == '-h':
            help_function(sys.argv[0])

        in_file = str(sys.argv[1])
        spawn_df = iterate_trough_trajs(in_file)
        plot_spawn_info(spawn_df)

    elif len(sys.argv) == 3:
        in_file = str(sys.argv[1])
        out_file = str(sys.argv[2])
        spawn_df = iterate_trough_trajs(in_file, out_file)
        plot_spawn_info(spawn_df)


